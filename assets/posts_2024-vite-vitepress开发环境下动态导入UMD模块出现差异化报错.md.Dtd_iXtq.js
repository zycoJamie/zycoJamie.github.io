import{_ as n,o as a,e,G as p}from"./chunks/framework.CXoXy2UI.js";const l="/img/8.png",u=JSON.parse('{"title":"vitepress主题开发--开发环境下动态导入UMD模块出现差异化报错","description":"","frontmatter":{"title":"vitepress主题开发--开发环境下动态导入UMD模块出现差异化报错","class":"vite","date":"2024-10-23"},"headers":[],"relativePath":"posts/2024-vite-vitepress开发环境下动态导入UMD模块出现差异化报错.md","filePath":"posts/2024-vite-vitepress开发环境下动态导入UMD模块出现差异化报错.md"}'),o={name:"posts/2024-vite-vitepress开发环境下动态导入UMD模块出现差异化报错.md"};function r(c,s,t,i,y,d){return a(),e("div",null,s[0]||(s[0]=[p(`<h4 id="不同项目出现差异化" tabindex="-1">不同项目出现差异化 <a class="header-anchor" href="#不同项目出现差异化" aria-label="Permalink to &quot;不同项目出现差异化&quot;">​</a></h4><p>本地<code>测试项目1</code>通过link链接本地包<code>vitepress-pure-theme-zyco</code></p><p>包中有如下逻辑</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vitepress-pure-theme-zyco的useValine中动态导入UMD模块valine</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;valine&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">default</span><span style="color:#24292E;">: </span><span style="color:#E36209;">Valine</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  ......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在测试项目1中生产和开发环境皆正常。</p><p>本地<code>测试项目2</code>通过install安装依赖， 生产环境正常，开发环境出现error <img src="`+l+`" alt="fc2563f9aa46de02b1d9a7d398359edc"></p><h4 id="报错原因" tabindex="-1">报错原因 <a class="header-anchor" href="#报错原因" aria-label="Permalink to &quot;报错原因&quot;">​</a></h4><p>首先来分析一下为什么会报错？</p><p>动态<code>import</code>引入<code>UMD</code>模块，在动态引入模块的上下文环境下，window是<code>undefined</code>，因此UMD模块挂载库代码到window上时出现error</p><h4 id="两个项目一个报错-一个正常-出现差异的原因" tabindex="-1">两个项目一个报错，一个正常，出现差异的原因 <a class="header-anchor" href="#两个项目一个报错-一个正常-出现差异的原因" aria-label="Permalink to &quot;两个项目一个报错，一个正常，出现差异的原因&quot;">​</a></h4><p>一开始以为是依赖了<code>不同版本的vite</code>，导致开发环境的差异。分析vite的打包源码后，两个本地项目依赖的vite，无论开发模式还是生产模式下的打包，都会通过<code>@rollup/plugin-commonjs</code>将模块转化为<code>ESM</code>，因此并非vite版本差异导致问题</p><p>最后发现是link本地vitepress-pure-theme-zyco，导致vite在开发环境下，进行<code>optimize deps(依赖优化)</code>时，valine会被处理，而通过安装依赖vitepress-pure-theme-zyco，optimize deps会跳过valine</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite v5.4.9</span></span>
<span class="line"><span style="color:#6A737D;">// 在vite插件import-analysis进行依赖分析后，通过插件vite:resolve解析包信息的时候，利用tryNodeResolve方法解析valine</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> tryNodeResolve</span><span style="color:#24292E;">( ){</span></span>
<span class="line"><span style="color:#D73A49;">  ...</span></span>
<span class="line"><span style="color:#6A737D;">  // 这里skipOptimization决定了是否对模块进行依赖优化，即转化为ES模块</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> skipOptimization</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">options.ssrOptimizeCheck </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> depsOptimizer?.options.noDiscovery</span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">isJsType </span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#24292E;"> importer </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> isInNodeModules$1</span><span style="color:#24292E;">(importer)</span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#24292E;"> exclude?.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(pkgId)</span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#24292E;"> exclude?.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#005CC5;"> SPECIAL_QUERY_RE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(resolved)</span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">options.ssrOptimizeCheck </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">isBuild </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> ssr </span></span>
<span class="line"><span style="color:#D73A49;">  ||</span><span style="color:#24292E;"> ssr </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> isFilePathESM</span><span style="color:#24292E;">(resolved,options.packageCache)</span></span>
<span class="line"><span style="color:#D73A49;">  &amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">(include?.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(pkgId) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> include?.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(id));</span></span>
<span class="line"><span style="color:#D73A49;">  ...</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (skipOptimization) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 跳过了依赖优化</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 这里的逻辑决定该包会被optimize deps</span></span>
<span class="line"><span style="color:#D73A49;">    const</span><span style="color:#005CC5;"> optimizedInfo</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> depsOptimizer.</span><span style="color:#6F42C1;">registerMissingImport</span><span style="color:#24292E;">(id, resolved);</span></span>
<span class="line"><span style="color:#24292E;">    resolved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> depsOptimizer.</span><span style="color:#6F42C1;">getOptimizedDepId</span><span style="color:#24292E;">(optimizedInfo);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>上面代码中<code>importer &amp;&amp; isInNodeModules$1(importer)</code>决定<code>skipOptimization</code>true还是false至关重要</p><p><code>开发环境下</code>，link本地vitepress-pure-theme-zyco，然后本地包的逻辑中动态引入了UMD模块valine，此时vite dev打包逻辑中<code>importer</code>是指向本地文件的一个绝对路径，<code>isInNodeModules$1</code>判断importer不是node_modules里的模块，所以<code>importer &amp;&amp; isInNodeModules$1(importer)</code>是false，最终<code>skipOptimization</code>为false，于是会对valine进行依赖优化</p><p>这也是为什么在<code>测试项目1</code>的开发环境下没有报错。</p><p><code>开发环境下</code>，安装依赖vitepress-pure-theme-zyco，包逻辑中动态引入了UMD模块valine，此时vite dev打包逻辑中importer是指向node_modules的一个绝对路径，<code>isInNodeModules$1</code>判断importer是node_modules里的模块文件，所以<code>importer &amp;&amp; isInNodeModules$1(importer)</code>是true，最终<code>skipOptimization</code>为true，于是依赖优化会跳过valine</p><p>这也是为什么在<code>测试项目2</code>的开发环境下会出现Error，即<code>依赖的依赖</code>会被跳过。</p><h4 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h4><p>因为vite在创建开发服务器的前置逻辑中，创建了依赖优化器，可以利用配置<code>optimizeDeps.include</code>强行优化指定模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> createServer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">inlineConfig</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> _createServer</span><span style="color:#24292E;">(inlineConfig, { hotListen: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> _createServer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">inlineConfig</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {}, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  ...</span></span>
<span class="line"><span style="color:#D73A49;">  await</span><span style="color:#6F42C1;"> initServer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> initServer</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (serverInited) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (initingServer) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> initingServer;</span></span>
<span class="line"><span style="color:#6F42C1;">  initingServer</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> async</span><span style="color:#D73A49;"> function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#D73A49;">    await</span><span style="color:#24292E;"> container.</span><span style="color:#6F42C1;">buildStart</span><span style="color:#24292E;">({});</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isDepsOptimizerEnabled</span><span style="color:#24292E;">(config, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 这里将会对vite配置中optimizeDeps.include指定的包进行依赖优化</span></span>
<span class="line"><span style="color:#D73A49;">      await</span><span style="color:#6F42C1;"> initDepsOptimizer</span><span style="color:#24292E;">(config, server);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">   ...</span></span>
<span class="line"><span style="color:#24292E;">  }();</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> initingServer;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>修改vite配置</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6F42C1;">  optimizeDeps</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#6F42C1;">      include</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">\`vitepress-pure-theme-zyco &gt; valine\`</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后再提一句，如果仅仅是<code>include: [valine]</code>是无效的，vite在第一层依赖中找不到指定包（因为该包是“依赖的依赖“），需要明确依赖的层级关系才有效。</p>`,24)]))}const b=n(o,[["render",r]]);export{u as __pageData,b as default};
