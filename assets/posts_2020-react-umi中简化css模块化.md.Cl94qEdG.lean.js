import{_ as n,o as a,e as l,G as p}from"./chunks/framework.CXoXy2UI.js";const u=JSON.parse('{"title":"umi中引入babel-plugin-react-css-modules简化css模块化","description":"","frontmatter":{"title":"umi中引入babel-plugin-react-css-modules简化css模块化","class":"react","date":"2020-11-29"},"headers":[],"relativePath":"posts/2020-react-umi中简化css模块化.md","filePath":"posts/2020-react-umi中简化css模块化.md"}'),e={name:"posts/2020-react-umi中简化css模块化.md"};function o(r,s,c,t,i,b){return a(),l("div",null,s[0]||(s[0]=[p(`<blockquote><p>环境</p></blockquote><p>umi + dva + react + ts</p><blockquote><p>问题</p></blockquote><ol><li>在ts中使用styleName出现 &quot;property &#39;styleName&#39; does not exist on type&quot; \\</li><li>在tsx中没有生成class \\</li><li>生成的class的hash与css模块化的hash不一致</li></ol><blockquote><p>解决问题</p></blockquote><p>解决第一个问题：在ts中使用styleName出现 &quot;property &#39;styleName&#39; does not exist on type&quot;</p><p>在项目中创建一个声明文件，在声明文件中进行如下声明：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> antd </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;antd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#D73A49;"> module</span><span style="color:#032F62;"> &#39;react&#39;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    interface</span><span style="color:#6F42C1;"> HTMLAttributes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#E36209;">        styleName</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样就能在html标签上使用styleName属性了。</p><p>但如果想在第三方组件上使用styleName该怎么办？因为第三方组件内部并没有声明styleName作为props</p><p>以antd为例，需要在声明文件里继续添加如下声明：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> antd </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;antd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#D73A49;"> module</span><span style="color:#032F62;"> &#39;antd/lib/list&#39;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">    interface</span><span style="color:#6F42C1;"> ListProps</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#E36209;">        styleName</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样就能在antd的List组件上使用styleName属性。</p><p>其他组件同理，去库中查看相应组件的声明文件，查看组件定义props的interface，然后在自己项目的声明文件里进行声明合并。</p><hr><p>解决问题二：在tsx中没有生成class</p><p>需要在tsconfig中将compilerOptions的jsx字段的值改为<strong>preserve</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#D73A49;">   ...</span></span>
<span class="line"><span style="color:#032F62;">    &quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;preserve&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#D73A49;">   ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因为是babel插件，在编译tsx文件时默认只交给ts-loader处理，改为<strong>preserve</strong>则在ts-loader处理后交给babel处理。</p><hr><p>解决问题三：生成的class的hash与css模块化的hash不一致</p><p>出现这个问题的原因有两个：</p><ol><li>css-loader模块化css时，生成的class没有把windows路径中的 <strong>\\</strong> 转化为 <strong>/</strong> ，而babel-plugin-react-css-modules使用的generic生成的class，内部是将 <strong>\\</strong> 进行了转换的。 \\</li><li>babel-plugin-react-css-modules不兼容新的css-loader</li></ol><p>因此使用 <strong>@dr.pogodin/babel-plugin-react-css-modules</strong>，该库是在babel-plugin-react-css-modules基础上修复了与css-loader兼容的问题</p><p>安装两个库：<strong>generic-names</strong>， <strong>@dr.pogodin/babel-plugin-react-css-modules</strong></p><p>修改 <strong>.umirc.ts</strong> 中的配置：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> config</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> IConfig</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extraBabelPlugins: [</span></span>
<span class="line"><span style="color:#6A737D;">    // [&#39;react-css-modules&#39;, {</span></span>
<span class="line"><span style="color:#6A737D;">    //   &quot;filetypes&quot;: {</span></span>
<span class="line"><span style="color:#6A737D;">    //     &quot;.scss&quot;: {</span></span>
<span class="line"><span style="color:#6A737D;">    //       &quot;syntax&quot;: &quot;postcss-scss&quot;</span></span>
<span class="line"><span style="color:#6A737D;">    //     }</span></span>
<span class="line"><span style="color:#6A737D;">    //   },</span></span>
<span class="line"><span style="color:#6A737D;">    //   // &#39;context&#39;: path.resolve(__dirname),</span></span>
<span class="line"><span style="color:#6A737D;">    //   &#39;generateScopedName&#39;: &#39;[name]__[local]___[hash:base64:5]&#39;</span></span>
<span class="line"><span style="color:#6A737D;">    // }],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&#39;@dr.pogodin/react-css-modules&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#032F62;">      &quot;filetypes&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">        &quot;.scss&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#032F62;">          &quot;syntax&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;postcss-scss&quot;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#032F62;">      &#39;generateScopedName&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;[name]__[local]___[hash:base64:5]&#39;</span></span>
<span class="line"><span style="color:#24292E;">    }]</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>将原本使用的babel插件babel-plugin-react-css-modules修改为@dr.pogodin/react-css-modules</p><p>然后继续修改配置<strong>cssLoaderOptions</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> path</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> genericNames</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;generic-names&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> generateScopedName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">localName</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filePath</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> relativePath</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">relative</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(), filePath);</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> genericNames</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;[name]__[local]___[hash:base64:5]&#39;</span><span style="color:#24292E;">, { context: process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">() })(localName, relativePath);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> config</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> IConfig</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  cssLoaderOptions: {</span></span>
<span class="line"><span style="color:#6F42C1;">    getLocalIdent</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">localIdentName</span><span style="color:#24292E;">, </span><span style="color:#E36209;">localName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">      return</span><span style="color:#6F42C1;"> generateScopedName</span><span style="color:#24292E;">(localName, context.resourcePath)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  extraBabelPlugins: [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>将css-loader生成class名字的逻辑进行自定义，交给generic去生成，这样就会将windows的路径 <strong>\\</strong> 转换</p><blockquote><p>最后</p></blockquote><p>通过上面的解决方法，就能在组件中使用styleName啦</p>`,33)]))}const m=n(e,[["render",o]]);export{u as __pageData,m as default};
