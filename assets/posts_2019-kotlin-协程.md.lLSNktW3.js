import{_ as n,o as a,e as l,G as p}from"./chunks/framework.CXoXy2UI.js";const u=JSON.parse('{"title":"协程","description":"","frontmatter":{"title":"协程","class":"kotlin","date":"2019-02-19"},"headers":[],"relativePath":"posts/2019-kotlin-协程.md","filePath":"posts/2019-kotlin-协程.md"}'),o={name:"posts/2019-kotlin-协程.md"};function e(r,s,c,t,i,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h3 id="协程的作用" tabindex="-1">协程的作用 <a class="header-anchor" href="#协程的作用" aria-label="Permalink to &quot;协程的作用&quot;">​</a></h3><p>提升CPU利用率，当I/O操作阻塞协程时，会让出CPU，将CPU交由其他协程占用，当I/O任务结束时，返回挂起的协程继续执行；减少线程切换的资源消耗；可控制，轻量，将异步写法同步化</p><h3 id="协程的启动方式" tabindex="-1">协程的启动方式 <a class="header-anchor" href="#协程的启动方式" aria-label="Permalink to &quot;协程的启动方式&quot;">​</a></h3><blockquote><p>runBlocking :T 用于启动顶层协程，常常用于线程与协程间的切换，会阻塞线程，直到该协程执行完成；会等待内部的子协程（不是全局协程）全部执行完毕 launch 在对应上下文中启动子协程，上层协程执行完成后会等待子协程执行完毕 async/await 会阻塞上层协程，直到await返回结果</p></blockquote><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">fun</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(args: </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> runBlocking</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Unit</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#D73A49;">    val</span><span style="color:#24292E;"> job </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> launch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6F42C1;">            println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;挂起中</span><span style="color:#005CC5;">$it</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">            delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    val</span><span style="color:#24292E;"> job2 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> async</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;">@async </span><span style="color:#032F62;">&quot;jamie&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;等待async/await返回结果&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(job2.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;得到async/await返回结果&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">    delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1300</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main:主协程等待中&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    job.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main:主协程结束&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>等待async/await返回结果 <br> 挂起中0 <br> 挂起中1 <br> jamie <br> 得到async/await返回结果 <br> 挂起中2 <br> 挂起中3 <br> main:主协程等待中 <br> main:主协程结束</p></blockquote><h3 id="作用域构建器" tabindex="-1">作用域构建器 <a class="header-anchor" href="#作用域构建器" aria-label="Permalink to &quot;作用域构建器&quot;">​</a></h3><blockquote><p>使用coroutineScope创建新的协程作用域，会阻塞上层的协程作用域</p></blockquote><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">fun</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(args:</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> runBlocking</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">    launch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">        println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Task from runBlocking&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">    coroutineScope</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        launch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">            delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">            println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Task from nested launch&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6F42C1;">        delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">        println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Task from coroutine scope&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">    println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Coroutine scope is over&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>Task from coroutine scope <br> Task from runBlocking <br> Task from nested launch <br> Coroutine scope is over</p></blockquote><h3 id="全局协程具有守护线程的特性" tabindex="-1">全局协程具有守护线程的特性 <a class="header-anchor" href="#全局协程具有守护线程的特性" aria-label="Permalink to &quot;全局协程具有守护线程的特性&quot;">​</a></h3><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">fun</span><span style="color:#6F42C1;"> main</span><span style="color:#24292E;">(args:</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> runBlocking</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    GlobalScope.</span><span style="color:#6F42C1;">launch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6F42C1;">        repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#6F42C1;">            println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sleep </span><span style="color:#005CC5;">$it</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">            delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#6F42C1;">    delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000L</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>sleep 0 <br> sleep 1 <br> sleep 2</p></blockquote>`,13)]))}const m=n(o,[["render",e]]);export{u as __pageData,m as default};
