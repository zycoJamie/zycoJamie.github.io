import{_ as n,o as a,e as p,G as l}from"./chunks/framework.CXoXy2UI.js";const b=JSON.parse('{"title":"判断泛型参数是否是any","description":"","frontmatter":{"title":"判断泛型参数是否是any","class":"ts","date":"2023-06-01"},"headers":[],"relativePath":"posts/2023-ts-判断泛型参数是否是any.md","filePath":"posts/2023-ts-判断泛型参数是否是any.md"}'),e={name:"posts/2023-ts-判断泛型参数是否是any.md"};function o(t,s,r,c,y,i){return a(),p("div",null,s[0]||(s[0]=[l(`<div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#6F42C1;"> Any</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // @ts-expect-error – dont worry about this.</span></span>
<span class="line"><span style="color:#D73A49;">    private</span><span style="color:#E36209;"> _</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> never</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">Any</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">?</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> :</span><span style="color:#005CC5;"> string</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">B</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#005CC5;"> 20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>泛型参数使用&#39; [ ] &#39;包裹住，那么当泛型参数T是any时，满足extends，此时 <br> type B = number</p><blockquote><p>假如是如下定义</p></blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code" tabindex="0"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#6F42C1;"> B</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;"> T</span><span style="color:#D73A49;"> extends</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">Any</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">?</span><span style="color:#005CC5;"> number</span><span style="color:#D73A49;"> :</span><span style="color:#005CC5;"> string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>那么当泛型参数T是any时，此时 <br> type B = number | string</p></blockquote>`,5)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
